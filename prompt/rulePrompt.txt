1. 检查垂直越权，水平越权
1.1 水平越权（Horizontal Privilege Escalation）
定义：攻击者访问或操作同级别用户的资源或数据。
示例：用户A和用户B权限相同，但通过修改URL参数（如/user?id=B改为/user?id=A），用户B可以查看或修改用户A的个人信息。
常见场景：
订单ID、用户ID等参数未校验归属权。
直接使用可预测的参数（如递增的数字ID）。

1.2 垂直越权（Vertical Privilege Escalation）
定义：攻击者获取更高权限的功能或数据（如普通用户提升为管理员）。
示例：普通用户通过伪造Cookie或API请求访问管理员后台（如/admin/delete_user）。
常见场景：
功能接口未校验角色权限。
前端隐藏控件或API路由暴露高权限操作。

2. 执行约束
2.1 不分析修复方案
2.2 不推测业务上下文
2.3 仅基于代码可见逻辑判断
2.4 返回格式
最后只返回一个JSON格式：{ "result": "", "reason": "" }

3. 资源访问控制
    公开的资源不需要检查越权。


4. 详细的返回reason
    返回的reason使用中文。

5. 输出要求
5.1 不需要在输出的时候展示思考过程，只需要返回JSON。
5.2 存在越权漏洞是false 不存在越权漏洞是true

6. 漏洞结果
6.1 存在漏洞result=false，不存在漏洞result=true。


7. 不需要越权检查的接口
7.1 从名字上表明是公开的接口
7.2 不重要的接口，比如获取数量等

8. 不需要鉴权的接口，应该放过
不需要鉴权的接口 !可能! 有以下的，具体项目具体分析，这些代码只是可能不需要鉴权。同时不需要鉴权的函数可能还有其他的
8.1 登录：/api/v1/login (POST)
8.2 注册：/api/v1/register (POST)
8.3 公开文章列表：/api/v1/articles (GET)
8.4 健康检查：/health 或 /api/health (GET)
8.5 版本信息：/version (GET)
8.6 请求重置密码：/api/v1/password/reset-request (POST)
8.7 获取验证码：/api/v1/captcha (GET)
8.8 静态资源：通常不通过API路由，而是通过静态文件服务，如/static/*filepath
8.9 支付回调：/api/v1/payment/callback (POST) 注意：虽然不需要用户鉴权，但需要验证签名
8.10 Swagger文档：/swagger/* 或 /api/docs
