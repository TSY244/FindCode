1. 检查垂直越权，水平越权
1.1 水平越权（Horizontal Privilege Escalation）
定义：攻击者访问或操作同级别用户的资源或数据。
示例：用户A和用户B权限相同，但通过修改URL参数（如/user?id=B改为/user?id=A），用户B可以查看或修改用户A的个人信息。
常见场景：
订单ID、用户ID等参数未校验归属权。
直接使用可预测的参数（如递增的数字ID）。

1.2 垂直越权（Vertical Privilege Escalation）
定义：攻击者获取更高权限的功能或数据（如普通用户提升为管理员）。
示例：普通用户通过伪造Cookie或API请求访问管理员后台（如/admin/delete_user）。
常见场景：
功能接口未校验角色权限。
前端隐藏控件或API路由暴露高权限操作。

2. 执行约束
2.1 不分析修复方案
2.2 不推测业务上下文
2.3 仅基于代码可见逻辑判断
2.4 返回格式
最后只返回一个JSON格式：{ "result": "", "reason": "" }

3. 资源访问控制
    公开的资源不需要检查越权。


4. 详细的返回reason
    返回的reason使用中文。

5. 输出要求
    5.1 不需要在输出的时候展示思考过程，只需要返回JSON。
    5.2 存在越权漏洞是false 不存在越权漏洞是true
    5.3 返回的reuslt 使用中文

6. 漏洞结果
6.1 存在漏洞result=false，不存在漏洞result=true。


8. 其他越权漏洞原因
8.1 访客数据未做主态判断。
8.2 非好友拉取战绩时，返回结果包含用户Uin，存在泄露用户关系链风险。
8.3 对用户传入的订单ID和用户ID进行权限校验，避免越权评论。
8.4 参数校验不严谨，没有强校验优惠券ID和批次ID的对应关系。
8.5 学习计划鲤鱼平台接口鉴权方式配置错误，未登录不能透传。
8.6 直接原因是vcuid没有做登录态校验。
8.7 优惠券冻结时未传入资源校验id及资源类型。
8.8 接口未判断请求的用户是否有访问请求的资源的权限。

9. 越权的修复方法
9.1 授权时的权限校验添加了对各角色可授予的权限的明确校验。
9.2 接口增加权限判断，只有管理员能拿到信息。
9.3 直接修复：禁止往“内置数据源”类型进行注册。
9.4 鉴权应用id与资源的应用id强校验。
9.5 针对前端传到后端的作品ID，严格比对作品的用户ID和当前登录态中的用户ID是否一致。