1. 检查垂直越权，水平越权
1.1 水平越权（Horizontal Privilege Escalation）
定义：攻击者访问或操作同级别用户的资源或数据。
示例：用户A和用户B权限相同，但通过修改URL参数（如/user?id=B改为/user?id=A），用户B可以查看或修改用户A的个人信息。
常见场景：
订单ID、用户ID等参数未校验归属权。
直接使用可预测的参数（如递增的数字ID）。

1.2 垂直越权（Vertical Privilege Escalation）
定义：攻击者获取更高权限的功能或数据（如普通用户提升为管理员）。
示例：普通用户通过伪造Cookie或API请求访问管理员后台（如/admin/delete_user）。
常见场景：
功能接口未校验角色权限。
前端隐藏控件或API路由暴露高权限操作。

2. 执行约束
2.1 不分析修复方案
2.2 不推测业务上下文
2.3 仅基于代码可见逻辑判断
2.4 返回格式
最后只返回一个JSON格式：{ "result": "", "reason": "" }

3. 资源访问控制
    公开的资源不需要检查越权。


4. 详细的返回reason
    返回的reason使用中文。

5. 输出要求
5.1 不需要在输出的时候展示思考过程，只需要返回JSON。
5.2 存在越权漏洞是false 不存在越权漏洞是true

6. 漏洞结果
6.1 存在漏洞result=false，不存在漏洞result=true。


7. 不需要越权检查的接口
7.1 从名字上表明是公开的接口
7.2 不重要的接口，比如获取数量等

8. 额外的注意的检查规则
8.1 进行了jwt 检查/token 检查等身份检查，但是没有对请求资源具体归属进行鉴权
    最常见的是在前面代码中进行了身份认证，之后就没有对请求参数中的资源id 进行鉴权导致了越权
8.2 整体代码上添加了鉴权框架，但是需要鉴权的资源id 没有在鉴权框架中进行鉴权
8.3 你应该考虑即使存在鉴权，但是有没有可能被绕过，比如限定的127.0.0.1 请求进行访问，但是我通过修改数据包，就可以绕过
8.4 是否存在直接使用用户输入ID而未验证权限
8.5 是否缺少当前用户与目标资源的归属比对
8.6 是否依赖前端传参而非服务端认证



