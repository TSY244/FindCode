1. 越权可能的代码有（并非完整go 函数代码，只有部分片段）：

1.1
错误代码：
if m, err = meta.GetMeta(ctx, app, attr.FileID); err != nil {
          return err
     }
     attr.Version = m.RevisionVersion + 1
     // 更新修订
     if err := commitRevertRevision(ctx, app, attr); err != nil {
     }
漏洞原因：没有调用鉴权框架进行鉴权，缺少鉴权函数，正确的逻辑是添加对应的鉴权
正确的代码：
     if err := checkPermssion(ctx, app, m, attr); err != nil {
          return err
     }
    if m, err = meta.GetMeta(ctx, app, attr.FileID); err != nil {
          return err
     }
     attr.Version = m.RevisionVersion + 1
     // 更新修订
     if err := commitRevertRevision(ctx, app, attr); err != nil {
     }


1.2
错误代码：
           if resp := middleware2.CheckJwt(params.HTTPRequest, apiManager.s); resp != nil {
               return resp
          }
          clientIds, err := req.GetAllClientId()
          clients, err := HostInfo.GetAgentsByClientIds(apiManager.s.DBM.DB, clientIds)
          clientInfo := convert2.ArrayCopy(clients, convert2.DbHostinfo2moduleHostinfo)
          return operations.NewGetGetClientsOK().WithPayload(&models.GetClientsResponse{
               Clients: clientInfo,
          })
产生漏洞的原因：
没有对req 中clients 的归属做校验，导致越权
正确的做法是获取req 中的clients之后应该进行检查，当前用户是否有权限查看每一个client

正确的代码:
           if resp := middleware2.CheckJwt(params.HTTPRequest, apiManager.s); resp != nil {
               return resp
          }
          clientIds, err := req.GetAllClientId()
          ids:=checkClientIds(clientIds) // 作用是检查clientIds 的归属，然后返回可以被调用的所有的clientId
          clients, err := HostInfo.GetAgentsByClientIds(apiManager.s.DBM.DB, ids)
          clientInfo := convert2.ArrayCopy(clients, convert2.DbHostinfo2moduleHostinfo)
          return operations.NewGetGetClientsOK().WithPayload(&models.GetClientsResponse{
               Clients: clientInfo,
          })




1.3
错误代码：
缺属性校验漏洞示例
     if param.Req.GetModifySeq() == 0 {
          return nil
     }

     // 打卡和作业不允许修改, 接龙和普通收集表都可以修改.
     if param.Meta.GetFormType() == formpb.FormType_FORM_TYPE_SIGN ||
          param.Meta.GetFormType() == formpb.FormType_FORM_TYPE_PAPER {

漏洞原因：
缺少对文档属性的检查，没有判断该文档是否能改

正确代码：
     if param.Req.GetModifySeq() == 0 {
          return nil
     }
     // 检查可修改设置是否打开.
     if !param.Meta.GetEnableModifySubmit() {
          return errs.New(int(code.Code_ERR_PERMISSION_DENIED), \"modification not enabled\")
     }
     // 打卡和作业不允许修改, 接龙和普通收集表都可以修改.
     if param.Meta.GetFormType() == formpb.FormType_FORM_TYPE_SIGN ||
          param.Meta.GetFormType() == formpb.FormType_FORM_TYPE_PAPER {




1.4
越权刷评论漏洞：
错误代码：
func (c *consumerImpl) checkPublishReq(ctx context.Context, req *BatchPublishCommentReq) error {
     // 1. 校验图片URL是否合法
     validURLs := c.cfg.Get().ValidPicURLs
     for _, item := range req.Comments {
          for _, pic := range item.PictureList {
               if !isValidPicURL(pic.GetUrl(), validURLs) {
                    // 任意一个图片不合法，返回错误
                    return errors.New(\"picture url invalid\")
               }
          }
     }
}
漏洞原因：
但是没有检查订单信息是否一致

准确的代码如下：
func (c *consumerImpl) checkPublishReq(ctx context.Context, req *BatchPublishCommentReq) error {
     // 1. 校验图片URL是否合法
     validURLs := c.cfg.Get().ValidPicURLs
     for _, item := range req.Comments {
          for _, pic := range item.PictureList {
               if !isValidPicURL(pic.GetUrl(), validURLs) {
                    // 任意一个图片不合法，返回错误
                    return errors.New(\"picture url invalid\")
               }
          }
     }
}
     // 2. 校验订单信息是否一致，避免越权刷评论等问题
     orderInfo, err := c.orderMgr.GetExpressOrder(ctx, req.OrderID)
     if err != nil {
          log.ErrorContextf(ctx, \"get express order info fail, orderID:%s, err:%+v\", req.OrderID, err)
          return err
     }
     if err = checkOrderInfo(orderInfo, req); err != nil {
          return err
     }
     return nil

1.5
缺少权限校验
错误代码：
// PostCommentFeed 帖子回复
// nolint
func (c *CommentImpl) PostCommentFeed(ctx context.Context, req *pb.PostCommentRequest,
     rsp *pb.PostCommentResponse) error {
     // 1. 发表接口开关检查
     if config.RainbowConfig.CommentSwitch == constant.OFF {
          return errs.New(errcode.RetErrPubOFF, \"comment switch off\")
     }
     // 2. 入参校验
     if !isValidInput(req) {
          return errs.Newf(errcode.RetErrInvalidParam, \"input invalid, %s\", strs.Format(req))
     }
     // 3. 获取用户登录信息
     userInfo, err := logicutil.GetUserInfo(ctx)
     if err != nil {
          log.ErrorContextf(ctx, \"[Comment] get UseInfo failed, err:<%v>\", err)
          return errs.Newf(errcode.RetErrLogin, \"get user info failed, err: %+v\", err)
     }
     c.vuid = cast.ToString(userInfo.Vuid) // 目前只是对齐弹幕回复，该字段在贴子场景未用上
     // 4. 数据转换
     msg.go, ctxMap := transFeedCommentData(ctx, req, userInfo)
     if msg.go == nil {
          log.ErrorContextf(ctx, \"[Comment] trans terminal pb to MsgDomainInfo failed,req:<%s>\", strs.Format(req))
          return errs.Newf(errcode.RetErrPBDecode, \"trans backend protocol failed, %s\", strs.Format(req))
     }
     // 5. 检查内容的图片url
     if err := logicutil.CheckContentPictureURL(msg.go); err != nil {
          log.ErrorContextf(ctx, \"[Publish] CheckContentPictureURL error, msg.go:%+v, err:%v\", msg.go, err)
          return errs.Newf(errcode.RetErrPicURL, \"CheckContentPictureURL err:%v\", err)
     }

漏洞原因：没有进行权限校验

正确的代码如下：
应该添加
     // 3.1 权限校验
     if err := publishFeedPermission(ctx, userInfo); err != nil {
          return err
     }

// publishFeedPermission 是否有发表的权限
func publishFeedPermission(ctx context.Context, user *unionmodel.UserCpInfo) error {
     // 用户发表类型为创作号，检查创作号的准确性
     vcuid, creatorStatus := logicutil.GetVcuid(ctx)
     if vcuid != \"\" && creatorStatus != \"\" && vcuid != user.Vcuid {
          logger.ErrorF(\"[publishFeedPermission] vcuid data inconsistency, ctx vcuid(%s) user vcuid(%s)\",
               vcuid, user.Vcuid)
          return errs.Newf(errcode.RetErrInvalidParam, \"vcuid data inconsistency, ctx vcuid(%s) user vcuid(%s)\",
               vcuid, user.Vcuid)
     }

     return nil
}


1.6 
越权查看导出的任务信息
错误代码:
else {
		task, err := a.exportTask.GetTaskInfoByTaskID(ctx, taskID)
        if task.TaskStatus != adminpb.TaskStatus_TASK_PROCESS {
        rsp.IsOver = wrapperspb.Bool(true)
		} else {
			_, err := a.cache.Get(ctx, &cache.Key{
				Prefix: adminpb.CachePrefix_ADMIN_EXPORT_LOG,

漏洞原因：由于没有检查task 和当前角色角色的所属关系，导致了越权
准确的代码：
		taskRsp = append(taskRsp, tasks...)
	} else {
		task, err := a.exportTask.GetTaskInfoByTaskID(ctx, taskID)
		if err != nil {
			return nil, err
		}
		// 防止用户越权查看导出任务信息
		if authentication.GetUserIdentity(ctx).GetUid() != task.GetUid() {
			return nil, errs.Newf(int(code.Code_ERR_INVALID_PARAMS), "无权限访问")
		}
		if task.GetTaskStatus() != adminpb.TaskStatus_TASK_PROCESS {
			rsp.IsOver = wrapperspb.Bool(true)
		} else {
			_, err := a.cache.Get(ctx, &cache.Key{
				Prefix: adminpb.CachePrefix_ADMIN_EXPORT_LOG,

1.7 越权更新模版
错误代码：
func (a *App) UpdateMarketingItem(ctx context.Context, p *marketingitem.Info) error {
	p.Item.OpRecord = p.OpRecord
	if err := a.processor(p.Item.GetType()).Update(ctx, p.Item); err != nil {
		return err

漏洞原因：由于没有调用详细的鉴权函数导致的越权
正确代码:
func (a *App) UpdateMarketingItem(ctx context.Context, p *marketingitem.Info) error {
	if err := a.checkSaaSPermission(ctx, p.Item); err != nil {
		return err
	}
	p.Item.OpRecord = p.OpRecord
	if err := a.processor(p.Item.GetType()).Update(ctx, p.Item); err != nil {
		return err


1.8 越权置顶
错误代码：
func (p *TAppOperatePrivateMsgProcess) pinMsg(o orm.Ormer) error {
	var messageIDs []uint32
	for _, pm := range p.Req.GetPrivateMsgs() {
		messageIDs = append(messageIDs, pm.GetMessageId())
	}
	topRecords, err := p.batchGetPrivateMsgTops(o, p.Req.GetOperator(), messageIDs)
	if err != nil {
		p.LogError("batchGetPrivateMsgTops err: %v", err)
		return err
	}
	pinTime := time.Now().Unix()
	for _, pm := range p.Req.GetPrivateMsgs() {

		topRecord, ok := topRecords[pm.GetMessageId()]
		if !ok || topRecord == nil {
			// 无置顶记录，插入置顶记录
			msgTop := mini_db_model.AppPrivateMessageTop{
				DeveloperId: p.Req.GetOperator(),
				MsgId:       pm.GetMessageId(),
				PinTime:     pinTime,
				State:       mini_db_model.AppPrivateMsgPinnedState,
			}
漏洞原因：
 for _, pm := range p.Req.GetPrivateMsgs() 这个循环中没有对pm 的所属做判断，导致可以越权置顶
正确代码如下：
func (p *TAppOperatePrivateMsgProcess) pinMsg(o orm.Ormer) error {
	var messageIDs []uint32
	for _, pm := range p.Req.GetPrivateMsgs() {
		messageIDs = append(messageIDs, pm.GetMessageId())
	}
	topRecords, err := p.batchGetPrivateMsgTops(o, p.Req.GetOperator(), messageIDs)
	if err != nil {
		p.LogError("batchGetPrivateMsgTops err: %v", err)
		return err
	}
	privateMsgs, err := p.batchGetPrivateMsgs(o, messageIDs)
	if err != nil {
		p.LogError("batchGetPrivateMsgs err: %v", err)
		return err
	}

	pinTime := time.Now().Unix()
	for _, pm := range p.Req.GetPrivateMsgs() {
		// 检查操作的msg是否是该开发者的
		if !isValidPrivateMsgID(p.Req.GetOperator(), pm.GetMessageId(), privateMsgs) {
			p.LogError("invalid msgID to pin, operator: %s, msgID: %d", p.Req.GetOperator(), pm.GetMessageId())
			return errs.New(errordefine.ErrInvalidInput, "invalid msg to pin")
		}

		topRecord, ok := topRecords[pm.GetMessageId()]
		if !ok || topRecord == nil {
			// 无置顶记录，插入置顶记录
			msgTop := mini_db_model.AppPrivateMessageTop{
				DeveloperId: p.Req.GetOperator(),
				MsgId:       pm.GetMessageId(),
				PinTime:     pinTime,
				State:       mini_db_model.AppPrivateMsgPinnedState,
			}

1.9 越权创建工作室
错误代码：
func (c *BusinessServiceServiceImpl) GetCodeTemplate(ctx context.Context, req *pb.GetCodeTemplateReq,
	rsp *pb.GetCodeTemplateRsp) (err error) {
	ctx = db.WithDBTxCtx(ctx, dao.M.CodeTemplateDao.DB)
	log.Infof("begin GetCodeTemplate")
	defer func() {
		if err := recover(); err != nil {
			log.ErrorContextf(ctx, "stack:%s", debug.Stack())
			rsp.CommonResult = utils.GetCommonResult(ctx, fmt.Errorf("panic: %v", err))
			return
		}
	}()
	rsp.Data, err = application.M.CodeTemplate.Get(ctx, req)
	rsp.CommonResult = utils.GetCommonResult(ctx, err)
	return nil
}

出现漏洞的原因: 没有验证ProjectId 是否是有权限操作的
准确的代码是：
// GetCodeTemplate 获取代码示例
func (c *BusinessServiceServiceImpl) GetCodeTemplate(ctx context.Context, req *pb.GetCodeTemplateReq,
	rsp *pb.GetCodeTemplateRsp) (err error) {
	ctx = db.WithDBTxCtx(ctx, dao.M.CodeTemplateDao.DB)
	log.Infof("begin GetCodeTemplate")
	defer func() {
		if err := recover(); err != nil {
			log.ErrorContextf(ctx, "stack:%s", debug.Stack())
			rsp.CommonResult = utils.GetCommonResult(ctx, fmt.Errorf("panic: %v", err))
			return
		}
	}()
	if err := authtools.Auth(ctx, req.ProjectId); err != nil {
		rsp.CommonResult = utils.GetCommonResult(ctx, errors.Wrap(utils.WrapErr(common.Code_PERMISSION_DENIED, err),
			"need permission"))
		return nil
	}
	rsp.Data, err = application.M.CodeTemplate.Get(ctx, req)
	rsp.CommonResult = utils.GetCommonResult(ctx, err)
	return nil
}


1.10 身份冒用
错误代码
// PublishMsg 消息发布
func (s *LiveDanmuWrite) PublishMsg(ctx context.Context,
	req *pb.PublishMsgRequest, rsp *pb.PublishMsgResponse) error {
	if err := checkParams(ctx, req); err != nil {
		if errs.Code(err) == constant.ErrDanmuGlobalSwitch {
			return nil
		}
		return err
	}
	filterLineBreak(ctx, req.GetItem().GetContent())
	metrics.IncrCounter(constant.MonitorReqTotal, 1)
	log.DebugContextf(ctx, "PublishMsg req: %s", constant.ToString(req))
	if isWebReply(ctx, req) { // web的弹幕回复
		if err := compatibleWebReq(ctx, req); err != nil { // 包含冗余裁剪，可减少一次反序列化
			return err
		}
	} else { // 弹幕回复的冗余内容裁剪
		reduceDanmakuInfo(ctx, req)
	}

发生漏洞的原因：
没有检查req 中的vuid 是否和cookie 中的是一致,用户的身份id，使用了请求参数里的，未使用cookie里的。

正确代码：
func (s *LiveDanmuWrite) PublishMsg(ctx context.Context,
	req *pb.PublishMsgRequest, rsp *pb.PublishMsgResponse) error {
	if err := checkParams(ctx, req); err != nil {
		if errs.Code(err) == constant.ErrDanmuGlobalSwitch {
			return nil
		}
		return err
	}
	checkAndRejustVuidParam(ctx, req.GetItem()) // 检查并调整vuid信息
	filterLineBreak(ctx, req.GetItem().GetContent())
	metrics.IncrCounter(constant.MonitorReqTotal, 1)
	log.DebugContextf(ctx, "PublishMsg req: %s", constant.ToString(req))
	if isWebReply(ctx, req) { // web的弹幕回复
		if err := compatibleWebReq(ctx, req); err != nil { // 包含冗余裁剪，可减少一次反序列化
			return err
		}
	} else { // 弹幕回复的冗余内容裁剪
		reduceDanmakuInfo(ctx, req)
	}

1.11 校验登陆人和删除的评论owner
错误的代码：
func (w *WriterServiceImpl) CreateCommAlbum(
	ctx context.Context, req *fa.CreateAlbumReq,
) (*fa.AlbumInfo, error) {
	// 校验请求
	if req.GetAlbumInfo() == nil || req.GetAlbumInfo().GetTitle() == "" {
		log.ErrorContextf(ctx, "album title empty")
		return nil, errs.New(int(base.FeedCloudRetCode_FC_ClIENT_PARAM_INVALID_ERR), "album title empty")
	}

	loginUID := trpcheadtool.GetLoginUID(ctx)
	// 修正所有人数据
	albumInfo := req.GetAlbumInfo()
	albumInfo.OwnerId = proto.String(loginUID)

	var feedSings []*fa.FeedSign
	for _, sign := range req.GetFeedSigns() {
		if sign.GetPosterId() != loginUID {
			log.ErrorContextf(ctx, "feed ignored %v owner not %s", sign.String(), loginUID)
			metrics.Counter("创建合集越权数量").Incr()
			continue
		}
		feedSings = append(feedSings, sign)
	}

	album, err := w.manager.CreateAlbum(ctx, albumInfo, req.GetFeedSigns())
	if err != nil {
		log.ErrorContextf(ctx, "CreateAlbum failed, req %s, err %v", req.String(), err)
		return nil, err
	}

	return album, nil
}
漏洞原因：没有校验owner和uid 的匹配性，直接讲req 的数据拿来用
正确的代码：
func (w *WriterServiceImpl) CreateCommAlbum(
	ctx context.Context, req *fa.CreateAlbumReq,
) (*fa.AlbumInfo, error) {
	// 校验请求
	if req.GetAlbumInfo() == nil || req.GetAlbumInfo().GetTitle() == "" {
		log.ErrorContextf(ctx, "album title empty")
		return nil, errs.New(int(base.FeedCloudRetCode_FC_ClIENT_PARAM_INVALID_ERR), "album title empty")
	}

	loginUID := trpcheadtool.GetLoginUID(ctx)
	// 修正所有人数据
	albumInfo := req.GetAlbumInfo()
	albumInfo.OwnerId = proto.String(loginUID)

	var feedSings []*fa.FeedSign
	for _, sign := range req.GetFeedSigns() {
		if sign.GetPosterId() != loginUID {
			log.ErrorContextf(ctx, "feed ignored %v owner not %s", sign.String(), loginUID)
			metrics.Counter("创建合集越权数量").Incr()
			continue
		}
		feedSings = append(feedSings, sign)
	}

	album, err := w.manager.CreateAlbum(ctx, albumInfo, feedSings)
	if err != nil {
		log.ErrorContextf(ctx, "CreateAlbum failed, req %s, err %v", req.String(), err)
		return nil, err
	}

	return album, nil
}

1.12 没有验证订单信息
错误代码：
func (l *OrderWriteLogic) ModifyPayStatusHandler(
	ctx context.Context, req *pb.ModifyPayStatusAccessReq, rsp *pb.ModifyPayStatusAccessRsp) error {
	payOrderID := req.GetCoreReq().GetPayOrderId()
	opera := req.GetCoreReq().GetOperation()
	if err := l.CheckFrequency(payOrderID, opera); err != nil {
		log.ErrorContextf(l.Ctx,
			"ModifyPayStatusHandler CheckFrequency PayOrderID [%s] Opera [%d] err [%+v]", payOrderID, opera, err)
		return err
	}
	l.userID = l.GetLoginUserID()
	if err := l.checkOrderCommIdentity(l.userID, payOrder, req.CoreReq.GetOperation()); err != nil {
		return err
	}
	req.GetCoreReq().UserId = l.userID
	rspCore, err := l.Sc.Core.ModifyPayStatus(ctx, req.CoreReq)
	if err != nil {
		log.ErrorContextf(l.Ctx, "ModifyPayStatusHandler userID [%s] req [%+v] err [%+v]", l.userID, req, err)
		return err
	}
	rsp.CoreRsp = rspCore
	return nil
}

// checkRefundIdentity 通用校验订单用户身份
func (l *OrderWriteLogic) checkOrderCommIdentity(userID string, orderType OrderType, opera uint32) error {
	if orderType == payOrder {
		if userID == "0" {
			return errcode.NewFormatErr(errcode.ErrCheckUserLogin, "user need login")
		}
	} else {
		if err := l.checkRole(userID, opera); err != nil {
			return err
		}
	}

	bCheckLogin := true
	if _, ok := noCheckLoginTokenMap[opera]; ok {
		bCheckLogin = false
	}
	if bCheckLogin {
		err := l.CheckUserLoginToken(l.Ctx, config.GlobalConfig().AppID)
		if err != nil {
			log.ErrorContextf(l.Ctx, "userID [%s] CheckUserLoginToken err [%+v]", userID, err)
			return err
		}
	}

	if orderType == payOrder {
		return nil
	}

	return l.CheckPrivilege(l.roleInfo, opera)
}
漏洞原因：
在这个函数中虽然存在CheckPrivilege 但是由于orderType == payOrder 这个地方为true 直接就返回了，并且在外面函数没有验证payOrderID 当前用户是否能够操作


1.13 由于过度依赖前端的参数，导致越权
错误代码：

// GetActSkuInfo 根据活动ID查询活动基础信息 & 参与活动的SKU库存信息
func (l *ActSkuLogic) GetActSkuInfo(req *pb.GetActSkuInfoReq, rsp *pb.GetActSkuInfoRsp) error {
	var err error
	l.videoHead, err = vhead.NewVHead(l.ctx)
	if err != nil {
		log.ErrorContextf(l.ctx, "GetActSkuInfo vhead.NewVHead fail: %v", err)
		return err
	}
	// 支持外部场景调用
	if req.GetCheckUserRight() {
		// 校验用户身份，这里校验的是读取活动详情权权限（1034）
		if err = l.sc.RightProxy.CheckUserRight(l.ctx, []int64{right.ROLE_RIGHT_TYPE_READ_ACTIVITY}); err != nil {
			return err
		}
	}
	// 获取活动信息并构造返回
	coreReq := coreread.GetActSkuBaseInfoReq{
		ActId: req.GetActId(),
	}
	coreRsp, err := l.sc.ActivityCoreReadService.GetActSkuBaseInfo(l.ctx, &coreReq)
	if err != nil {
		log.ErrorContextf(l.ctx, "get act base info fail: %v, req: %v", err, req)
		return err
	}
	log.InfoContextf(l.ctx, "GetActSkuBaseInfo req: %v, rsp: %v", coreReq, coreRsp)
	rsp.ActInfo = coreRsp.GetActInfo()
	rsp.ActSkuInfoList = coreRsp.GetActSkuInfo()
	return nil
}
func (x *GetActSkuInfoReq) GetCheckUserRight() bool {
	if x != nil {
		return x.CheckUserRight
	}
	return false
}

直接从请求中获取这个bool 类型的值，如果存在手动构造这个为true 将会绕过 CheckUserRight 检查

1.14 由于没有校验id 可能导致的越权问题
func (l *ActWriteLogic) ProcessAddActReq(req *pb.AddActReq, rsp *pb.AddActRsp) error {
	var err error
	l.videoHead, err = vhead.NewVHead(l.ctx)
	.....
	//权限校验
	authID := []int64{right.ROLE_RIGHT_TYPE_MGR_ACTIVITY}
	if req.ActInfo.ActBaseInfo.ActType == actcomm.ActivityType_E_ACT_CHANNEL {
		authID = []int64{right.ROLE_RIGHT_TYPE_MGR_CHANNEL}
	}
	if err = l.sc.RightProxy.CheckUserRight(l.ctx, authID); err != nil {
		log.ErrorContextf(l.ctx, "ProcessAddActReq CheckAuthentication fail, [%s]", err.Error())
		return err
	}
	// 针对新加入营销活动的sku库存锁定
	if err = l.lockAndSetMarketingBatchInfo(l.ctx, req); err != nil {
		return err
	}
....

/ lockAndSetMarketingBatchInfo 设置批次信息
func (l *ActWriteLogic) lockAndSetMarketingBatchInfo(ctx context.Context, req *pb.AddActReq) error {
.....
	var quanTask []func() error
	// 找到未锁定的批次信息
	for _, threshold := range req.GetActInfo().GetGwpConf().GetThresholdConfs() {
		for _, tmpGiftConf := range threshold.GetGiftDetailConf().GetGiftConfs() {
			giftConf := tmpGiftConf
			if giftConf.GetBatchId() == "" {
				quanTask = append(quanTask, func() error {
					cCtx := trpc.CloneContext(ctx)
					g := giftConf
					skuInfo, err := l.sc.ProductProxy.GetSkuStaticInfo(cCtx, g.GetSkuId())
					if err != nil {
						return err
					}
					batchInfo, err := l.sc.QuantityAdminProxy.CreateSkuLock(ctx, &corepb.CreateSkuLockReq{
						LockInfo: &corepb.SkuLockInfo{
							ProdId:       skuInfo.GetProductId(),
							SkuId:        g.GetSkuId(),
							LockNum:      uint32(giftConf.GetQuantity()),
							Usage:        corepb.LockUsageType_LockUsageTypeNormal,
							LockName:     config.GlobalConfig().MarketingActInfo.BatchLockName,
							CreateSource: corepb.CreateSource_CREATE_SOURCE_API,
						},
					})
....
在lockAndSetMarketingBatchInfo 函数中没有对ProdId 的值进行一个过滤，导致了水平越权，只要有CheckUserRight 这个函数需要的权限就可以使用任意的id 。没有对id 做检查